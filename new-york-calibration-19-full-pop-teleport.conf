include "new-york-calibration-19.conf"

beam.agentsim.simulationName = "new-york-calibration-19-full-pop-teleportation"

beam.agentsim.lastIteration = 0
beam.physsim.flowCapacityFactor = 0.5
beam.agentsim.agentSampleSizeAsFractionOfPopulation = 1.0
beam.agentsim.taz.parkingStallCountScalingFactor = 0.5
beam.agentsim.tuning.transitCapacity = 0.5

beam.agentsim.agents.tripBehaviors.multinomialLogit.generate_secondary_activities = false

# If set to true then after reading input plans and after generation of secondary activities (if enabled)
# will replace modes in plans according to the modeMap
beam.agentsim.agents.tripBehaviors.replaceModes.enabled = true
# Modes to replace in input plans before starting the simulation.
# Require a list of strings "<mode to replace> -> <by mode>"
# modes from plans -> 'walk_transit', 'car', 'walk', 'ride_hail_pooled', 'ride_hail', 'bike'
beam.agentsim.agents.tripBehaviors.replaceModes.modeMap = [
  "car              -> hov2_teleportation",
  "walk             -> hov2_teleportation",
  "ride_hail_pooled -> hov2_teleportation",
  "ride_hail        -> hov2_teleportation",
  "bike             -> hov2_teleportation",
]

beam.exchange.scenario {
  # source for now can be "MATSim" or "UrbanSim"
  source = "urbansim_v2"
  # Input file format for scenario loader can be "csv" or "parquet"
  fileFormat = "csv"
  folder = ${beam.inputDirectory}"/urbansim_v2/13122k-NYC-no-kids-with-walk-transit-modes"
  convertWgs2Utm = true
  modeMap = [
    "walk_transit     -> walk_transit",
    "car              -> car",
    "walk             -> walk",
    "ride_hail_pooled -> ride_hail_pooled",
    "ride_hail        -> ride_hail",
    "bike             -> bike"
  ]
}

